-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_image_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    input_image_empty_n : IN STD_LOGIC;
    input_image_read : OUT STD_LOGIC;
    output_image_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_image_full_n : IN STD_LOGIC;
    output_image_write : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sobel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sobel,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.935250,HLS_SYN_LAT=2459041,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=164,HLS_SYN_LUT=248}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_280 : STD_LOGIC_VECTOR (10 downto 0) := "01010000000";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_27 : BOOLEAN;
    signal line_buffer_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_ce0 : STD_LOGIC;
    signal line_buffer_we0 : STD_LOGIC;
    signal line_buffer_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_ce1 : STD_LOGIC;
    signal line_buffer_we1 : STD_LOGIC;
    signal line_buffer_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buffer_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal window_buffer_ce0 : STD_LOGIC;
    signal window_buffer_we0 : STD_LOGIC;
    signal window_buffer_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buffer_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buffer_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal window_buffer_ce1 : STD_LOGIC;
    signal window_buffer_we1 : STD_LOGIC;
    signal window_buffer_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buffer_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_203 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_81 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_88 : BOOLEAN;
    signal exitcond2_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_98 : BOOLEAN;
    signal i_1_fu_215_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_480 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_fu_227_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_reg_488 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_109 : BOOLEAN;
    signal line_buffer_addr_reg_493 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buffer_addr_2_reg_499 : STD_LOGIC_VECTOR (10 downto 0);
    signal window_buffer_load_1_reg_505 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_load_reg_511 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_load_1_reg_517 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buffer_load_2_reg_523 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_128 : BOOLEAN;
    signal window_buffer_load_4_reg_529 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_image_read_reg_536 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buffer_load_5_reg_542 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_neg6_fu_312_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_neg6_reg_548 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_neg7_fu_334_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_neg7_reg_553 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_20_fu_470_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_reg_558 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_148 : BOOLEAN;
    signal i_reg_180 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_161 : BOOLEAN;
    signal j_reg_191 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_173 : BOOLEAN;
    signal tmp_13_cast1_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_cast1_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_186 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_205 : BOOLEAN;
    signal tmp_4_cast_fu_233_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_fu_237_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_248_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_267_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_cast_fu_264_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_cast_fu_278_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_292_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_fu_298_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_cast_fu_274_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_302_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_cast_fu_308_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_cast_fu_285_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_318_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_cast_fu_324_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_cast2_fu_281_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_328_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_cast1_fu_289_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_340_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_cast_fu_347_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_neg4_fu_354_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_cast_fu_351_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_359_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_375_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_386_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_cast_fu_382_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_neg7_cast_fu_397_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_neg9_fu_400_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_cast_fu_393_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_406_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_422_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal abscond_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_432_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_446_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal abscond1_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_456_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_438_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_462_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component sobel_line_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sobel_window_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    line_buffer_U : component sobel_line_buffer
    generic map (
        DataWidth => 8,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_address0,
        ce0 => line_buffer_ce0,
        we0 => line_buffer_we0,
        d0 => line_buffer_d0,
        q0 => line_buffer_q0,
        address1 => line_buffer_address1,
        ce1 => line_buffer_ce1,
        we1 => line_buffer_we1,
        d1 => line_buffer_d1,
        q1 => line_buffer_q1);

    window_buffer_U : component sobel_window_buffer
    generic map (
        DataWidth => 8,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => window_buffer_address0,
        ce0 => window_buffer_ce0,
        we0 => window_buffer_we0,
        d0 => window_buffer_d0,
        q0 => window_buffer_q0,
        address1 => window_buffer_address1,
        ce1 => window_buffer_ce1,
        we1 => window_buffer_we1,
        d1 => window_buffer_d1,
        q1 => window_buffer_q1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_180 assign process. --
    i_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
                i_reg_180 <= i_1_reg_480;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_180 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- j_reg_191 assign process. --
    j_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                j_reg_191 <= j_1_reg_488;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_209_p2 = ap_const_lv1_0))) then 
                j_reg_191 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_480 <= i_1_fu_215_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((input_image_empty_n = ap_const_logic_0)))) then
                input_image_read_reg_536 <= input_image_dout;
                window_buffer_load_2_reg_523 <= window_buffer_q0;
                window_buffer_load_4_reg_529 <= window_buffer_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_1_reg_488 <= j_1_fu_227_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_221_p2 = ap_const_lv1_0))) then
                line_buffer_addr_2_reg_499 <= tmp_17_cast1_fu_254_p1(11 - 1 downto 0);
                line_buffer_addr_reg_493 <= tmp_13_cast1_fu_243_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                line_buffer_load_1_reg_517 <= line_buffer_q1;
                line_buffer_load_reg_511 <= line_buffer_q0;
                window_buffer_load_1_reg_505 <= window_buffer_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                p_neg6_reg_548 <= p_neg6_fu_312_p2;
                p_neg7_reg_553 <= p_neg7_fu_334_p2;
                window_buffer_load_5_reg_542 <= window_buffer_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then
                reg_203 <= window_buffer_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                tmp_20_reg_558 <= tmp_20_fu_470_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, input_image_empty_n, output_image_full_n, exitcond2_fu_209_p2, exitcond1_fu_221_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond2_fu_209_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((exitcond1_fu_221_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if (not((input_image_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if (not((output_image_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    abscond1_fu_450_p2 <= "1" when (signed(tmp_11_fu_406_p2) > signed(ap_const_lv11_0)) else "0";
    abscond_fu_426_p2 <= "1" when (signed(tmp_5_fu_359_p2) > signed(ap_const_lv11_0)) else "0";

    -- ap_done assign process. --
    ap_done_assign_proc : process(exitcond2_fu_209_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_209_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond2_fu_209_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_209_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    -- ap_sig_bdd_109 assign process. --
    ap_sig_bdd_109_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_109 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_128 assign process. --
    ap_sig_bdd_128_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_128 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_148 assign process. --
    ap_sig_bdd_148_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_148 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_161 assign process. --
    ap_sig_bdd_161_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_161 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_173 assign process. --
    ap_sig_bdd_173_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_173 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_186 assign process. --
    ap_sig_bdd_186_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_186 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_205 assign process. --
    ap_sig_bdd_205_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_205 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_27 assign process. --
    ap_sig_bdd_27_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_27 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_81 assign process. --
    ap_sig_bdd_81_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_81 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_88 assign process. --
    ap_sig_bdd_88_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_88 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_98 assign process. --
    ap_sig_bdd_98_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_98 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_173)
    begin
        if (ap_sig_bdd_173) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_161)
    begin
        if (ap_sig_bdd_161) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_27)
    begin
        if (ap_sig_bdd_27) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_98)
    begin
        if (ap_sig_bdd_98) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_109)
    begin
        if (ap_sig_bdd_109) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_81)
    begin
        if (ap_sig_bdd_81) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_128)
    begin
        if (ap_sig_bdd_128) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_88)
    begin
        if (ap_sig_bdd_88) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_148)
    begin
        if (ap_sig_bdd_148) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_186)
    begin
        if (ap_sig_bdd_186) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_205)
    begin
        if (ap_sig_bdd_205) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_221_p2 <= "1" when (j_reg_191 = ap_const_lv10_280) else "0";
    exitcond2_fu_209_p2 <= "1" when (i_reg_180 = ap_const_lv9_1E0) else "0";
    i_1_fu_215_p2 <= std_logic_vector(unsigned(i_reg_180) + unsigned(ap_const_lv9_1));

    -- input_image_read assign process. --
    input_image_read_assign_proc : process(input_image_empty_n, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((input_image_empty_n = ap_const_logic_0)))) then 
            input_image_read <= ap_const_logic_1;
        else 
            input_image_read <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_227_p2 <= std_logic_vector(unsigned(j_reg_191) + unsigned(ap_const_lv10_1));

    -- line_buffer_address0 assign process. --
    line_buffer_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st3_fsm_2, line_buffer_addr_2_reg_499, ap_sig_cseq_ST_st5_fsm_4, tmp_13_cast1_fu_243_p1, tmp_4_fu_259_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            line_buffer_address0 <= line_buffer_addr_2_reg_499;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            line_buffer_address0 <= tmp_4_fu_259_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            line_buffer_address0 <= tmp_13_cast1_fu_243_p1(11 - 1 downto 0);
        else 
            line_buffer_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- line_buffer_address1 assign process. --
    line_buffer_address1_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st3_fsm_2, line_buffer_addr_reg_493, tmp_17_cast1_fu_254_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            line_buffer_address1 <= line_buffer_addr_reg_493;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            line_buffer_address1 <= tmp_17_cast1_fu_254_p1(11 - 1 downto 0);
        else 
            line_buffer_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- line_buffer_ce0 assign process. --
    line_buffer_ce0_assign_proc : process(input_image_empty_n, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((input_image_empty_n = ap_const_logic_0))))) then 
            line_buffer_ce0 <= ap_const_logic_1;
        else 
            line_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- line_buffer_ce1 assign process. --
    line_buffer_ce1_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            line_buffer_ce1 <= ap_const_logic_1;
        else 
            line_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- line_buffer_d0 assign process. --
    line_buffer_d0_assign_proc : process(input_image_dout, line_buffer_q0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            line_buffer_d0 <= input_image_dout;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            line_buffer_d0 <= line_buffer_q0;
        else 
            line_buffer_d0 <= "XXXXXXXX";
        end if; 
    end process;

    line_buffer_d1 <= line_buffer_q1;

    -- line_buffer_we0 assign process. --
    line_buffer_we0_assign_proc : process(input_image_empty_n, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((input_image_empty_n = ap_const_logic_0))))) then 
            line_buffer_we0 <= ap_const_logic_1;
        else 
            line_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- line_buffer_we1 assign process. --
    line_buffer_we1_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            line_buffer_we1 <= ap_const_logic_1;
        else 
            line_buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

    output_image_din <= tmp_20_reg_558;

    -- output_image_write assign process. --
    output_image_write_assign_proc : process(output_image_full_n, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((output_image_full_n = ap_const_logic_0)))) then 
            output_image_write <= ap_const_logic_1;
        else 
            output_image_write <= ap_const_logic_0;
        end if; 
    end process;

    p_neg4_fu_354_p2 <= std_logic_vector(unsigned(p_neg6_reg_548) - unsigned(tmp_3_cast_fu_347_p1));
    p_neg6_fu_312_p2 <= std_logic_vector(unsigned(tmp_12_cast_fu_308_p1) - unsigned(tmp_9_cast_fu_285_p1));
        p_neg7_cast_fu_397_p1 <= std_logic_vector(resize(signed(p_neg7_reg_553),11));

    p_neg7_fu_334_p2 <= std_logic_vector(unsigned(tmp_10_fu_328_p2) - unsigned(tmp_10_cast1_fu_289_p1));
    p_neg9_fu_400_p2 <= std_logic_vector(unsigned(tmp_15_cast_fu_382_p1) + unsigned(p_neg7_cast_fu_397_p1));
    tmp_10_cast1_fu_289_p1 <= std_logic_vector(resize(unsigned(window_buffer_load_4_reg_529),10));
    tmp_10_cast_fu_351_p1 <= std_logic_vector(resize(unsigned(window_buffer_load_4_reg_529),11));
    tmp_10_fu_328_p2 <= std_logic_vector(signed(tmp_18_cast_fu_324_p1) + signed(tmp_9_cast2_fu_281_p1));
    tmp_11_fu_406_p2 <= std_logic_vector(unsigned(p_neg9_fu_400_p2) - unsigned(tmp_17_cast_fu_393_p1));
    tmp_12_cast_fu_308_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_302_p2),11));
    tmp_12_fu_237_p2 <= std_logic_vector(unsigned(ap_const_lv11_280) + unsigned(tmp_4_cast_fu_233_p1));
    tmp_13_cast1_fu_243_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_237_p2),64));
    tmp_13_fu_248_p2 <= std_logic_vector(signed(ap_const_lv11_500) + signed(tmp_4_cast_fu_233_p1));
    tmp_14_fu_432_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_16_fu_422_p1));
    tmp_15_cast_fu_382_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_375_p3),11));
    tmp_15_fu_438_p3 <= 
        tmp_16_fu_422_p1 when (abscond_fu_426_p2(0) = '1') else 
        tmp_14_fu_432_p2;
    tmp_16_fu_422_p1 <= tmp_5_fu_359_p2(8 - 1 downto 0);
    tmp_17_cast1_fu_254_p1 <= std_logic_vector(resize(unsigned(tmp_13_fu_248_p2),64));
    tmp_17_cast_fu_393_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_386_p3),11));
    tmp_17_fu_446_p1 <= tmp_11_fu_406_p2(8 - 1 downto 0);
        tmp_18_cast_fu_324_p1 <= std_logic_vector(resize(signed(tmp_9_fu_318_p2),10));

    tmp_18_fu_456_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_17_fu_446_p1));
    tmp_19_fu_462_p3 <= 
        tmp_17_fu_446_p1 when (abscond1_fu_450_p2(0) = '1') else 
        tmp_18_fu_456_p2;
    tmp_20_fu_470_p2 <= std_logic_vector(unsigned(tmp_15_fu_438_p3) + unsigned(tmp_19_fu_462_p3));
    tmp_3_cast_fu_347_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_340_p3),11));
    tmp_3_fu_340_p3 <= (window_buffer_load_2_reg_523 & ap_const_lv1_0);
    tmp_4_cast_fu_233_p1 <= std_logic_vector(resize(unsigned(j_reg_191),11));
    tmp_4_fu_259_p1 <= std_logic_vector(resize(unsigned(j_reg_191),64));
    tmp_5_cast_fu_264_p1 <= std_logic_vector(resize(unsigned(line_buffer_load_reg_511),9));
    tmp_5_fu_359_p2 <= std_logic_vector(unsigned(p_neg4_fu_354_p2) - unsigned(tmp_10_cast_fu_351_p1));
    tmp_6_fu_375_p3 <= (window_buffer_load_1_reg_505 & ap_const_lv1_0);
    tmp_7_cast_fu_274_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_267_p3),10));
    tmp_7_fu_267_p3 <= (line_buffer_load_1_reg_517 & ap_const_lv1_0);
    tmp_8_cast_fu_278_p1 <= std_logic_vector(resize(unsigned(input_image_read_reg_536),9));
    tmp_8_fu_386_p3 <= (window_buffer_load_5_reg_542 & ap_const_lv1_0);
    tmp_9_cast2_fu_281_p1 <= std_logic_vector(resize(unsigned(reg_203),10));
    tmp_9_cast_fu_285_p1 <= std_logic_vector(resize(unsigned(reg_203),11));
    tmp_9_fu_318_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_264_p1) - unsigned(tmp_8_cast_fu_278_p1));
    tmp_cast_fu_298_p1 <= std_logic_vector(resize(unsigned(tmp_fu_292_p2),10));
    tmp_fu_292_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_264_p1) + unsigned(tmp_8_cast_fu_278_p1));
    tmp_s_fu_302_p2 <= std_logic_vector(unsigned(tmp_cast_fu_298_p1) + unsigned(tmp_7_cast_fu_274_p1));

    -- window_buffer_address0 assign process. --
    window_buffer_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            window_buffer_address0 <= ap_const_lv4_8;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            window_buffer_address0 <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            window_buffer_address0 <= ap_const_lv4_6;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            window_buffer_address0 <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            window_buffer_address0 <= ap_const_lv4_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            window_buffer_address0 <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            window_buffer_address0 <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            window_buffer_address0 <= ap_const_lv4_1;
        else 
            window_buffer_address0 <= "XXXX";
        end if; 
    end process;


    -- window_buffer_address1 assign process. --
    window_buffer_address1_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            window_buffer_address1 <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            window_buffer_address1 <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            window_buffer_address1 <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            window_buffer_address1 <= ap_const_lv4_8;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            window_buffer_address1 <= ap_const_lv4_7;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            window_buffer_address1 <= ap_const_lv4_2;
        else 
            window_buffer_address1 <= "XXXX";
        end if; 
    end process;


    -- window_buffer_ce0 assign process. --
    window_buffer_ce0_assign_proc : process(input_image_empty_n, output_image_full_n, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((input_image_empty_n = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((output_image_full_n = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            window_buffer_ce0 <= ap_const_logic_1;
        else 
            window_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- window_buffer_ce1 assign process. --
    window_buffer_ce1_assign_proc : process(input_image_empty_n, output_image_full_n, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((input_image_empty_n = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((output_image_full_n = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            window_buffer_ce1 <= ap_const_logic_1;
        else 
            window_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- window_buffer_d0 assign process. --
    window_buffer_d0_assign_proc : process(reg_203, ap_sig_cseq_ST_st6_fsm_5, line_buffer_load_reg_511, window_buffer_load_2_reg_523, window_buffer_load_4_reg_529, input_image_read_reg_536, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            window_buffer_d0 <= input_image_read_reg_536;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            window_buffer_d0 <= line_buffer_load_reg_511;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            window_buffer_d0 <= window_buffer_load_4_reg_529;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            window_buffer_d0 <= window_buffer_load_2_reg_523;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            window_buffer_d0 <= reg_203;
        else 
            window_buffer_d0 <= "XXXXXXXX";
        end if; 
    end process;


    -- window_buffer_d1 assign process. --
    window_buffer_d1_assign_proc : process(reg_203, ap_sig_cseq_ST_st6_fsm_5, window_buffer_load_1_reg_505, line_buffer_load_1_reg_517, window_buffer_load_5_reg_542, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            window_buffer_d1 <= line_buffer_load_1_reg_517;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            window_buffer_d1 <= window_buffer_load_5_reg_542;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            window_buffer_d1 <= reg_203;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            window_buffer_d1 <= window_buffer_load_1_reg_505;
        else 
            window_buffer_d1 <= "XXXXXXXX";
        end if; 
    end process;


    -- window_buffer_we0 assign process. --
    window_buffer_we0_assign_proc : process(output_image_full_n, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((output_image_full_n = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            window_buffer_we0 <= ap_const_logic_1;
        else 
            window_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- window_buffer_we1 assign process. --
    window_buffer_we1_assign_proc : process(output_image_full_n, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((output_image_full_n = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            window_buffer_we1 <= ap_const_logic_1;
        else 
            window_buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
