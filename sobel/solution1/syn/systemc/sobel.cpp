// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "sobel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sobel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sobel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> sobel::ap_ST_st1_fsm_0 = "1";
const sc_lv<11> sobel::ap_ST_st2_fsm_1 = "10";
const sc_lv<11> sobel::ap_ST_st3_fsm_2 = "100";
const sc_lv<11> sobel::ap_ST_st4_fsm_3 = "1000";
const sc_lv<11> sobel::ap_ST_st5_fsm_4 = "10000";
const sc_lv<11> sobel::ap_ST_st6_fsm_5 = "100000";
const sc_lv<11> sobel::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<11> sobel::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<11> sobel::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<11> sobel::ap_ST_st10_fsm_9 = "1000000000";
const sc_lv<11> sobel::ap_ST_st11_fsm_10 = "10000000000";
const sc_lv<32> sobel::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> sobel::ap_const_lv1_1 = "1";
const sc_lv<32> sobel::ap_const_lv32_3 = "11";
const sc_lv<32> sobel::ap_const_lv32_5 = "101";
const sc_lv<32> sobel::ap_const_lv32_1 = "1";
const sc_lv<32> sobel::ap_const_lv32_2 = "10";
const sc_lv<1> sobel::ap_const_lv1_0 = "0";
const sc_lv<32> sobel::ap_const_lv32_4 = "100";
const sc_lv<32> sobel::ap_const_lv32_6 = "110";
const sc_lv<9> sobel::ap_const_lv9_0 = "000000000";
const sc_lv<32> sobel::ap_const_lv32_A = "1010";
const sc_lv<10> sobel::ap_const_lv10_0 = "0000000000";
const sc_lv<32> sobel::ap_const_lv32_9 = "1001";
const sc_lv<32> sobel::ap_const_lv32_7 = "111";
const sc_lv<4> sobel::ap_const_lv4_1 = "1";
const sc_lv<4> sobel::ap_const_lv4_4 = "100";
const sc_lv<4> sobel::ap_const_lv4_5 = "101";
const sc_lv<32> sobel::ap_const_lv32_8 = "1000";
const sc_lv<4> sobel::ap_const_lv4_0 = "0000";
const sc_lv<4> sobel::ap_const_lv4_3 = "11";
const sc_lv<4> sobel::ap_const_lv4_6 = "110";
const sc_lv<4> sobel::ap_const_lv4_2 = "10";
const sc_lv<4> sobel::ap_const_lv4_8 = "1000";
const sc_lv<4> sobel::ap_const_lv4_7 = "111";
const sc_lv<9> sobel::ap_const_lv9_1E0 = "111100000";
const sc_lv<9> sobel::ap_const_lv9_1 = "1";
const sc_lv<10> sobel::ap_const_lv10_280 = "1010000000";
const sc_lv<10> sobel::ap_const_lv10_1 = "1";
const sc_lv<11> sobel::ap_const_lv11_280 = "1010000000";
const sc_lv<11> sobel::ap_const_lv11_500 = "10100000000";
const sc_lv<11> sobel::ap_const_lv11_0 = "00000000000";
const sc_lv<8> sobel::ap_const_lv8_0 = "00000000";

sobel::sobel(sc_module_name name) : sc_module(name), mVcdFile(0) {
    line_buffer_U = new sobel_line_buffer("line_buffer_U");
    line_buffer_U->clk(ap_clk);
    line_buffer_U->reset(ap_rst);
    line_buffer_U->address0(line_buffer_address0);
    line_buffer_U->ce0(line_buffer_ce0);
    line_buffer_U->we0(line_buffer_we0);
    line_buffer_U->d0(line_buffer_d0);
    line_buffer_U->q0(line_buffer_q0);
    line_buffer_U->address1(line_buffer_address1);
    line_buffer_U->ce1(line_buffer_ce1);
    line_buffer_U->we1(line_buffer_we1);
    line_buffer_U->d1(line_buffer_d1);
    line_buffer_U->q1(line_buffer_q1);
    window_buffer_U = new sobel_window_buffer("window_buffer_U");
    window_buffer_U->clk(ap_clk);
    window_buffer_U->reset(ap_rst);
    window_buffer_U->address0(window_buffer_address0);
    window_buffer_U->ce0(window_buffer_ce0);
    window_buffer_U->we0(window_buffer_we0);
    window_buffer_U->d0(window_buffer_d0);
    window_buffer_U->q0(window_buffer_q0);
    window_buffer_U->address1(window_buffer_address1);
    window_buffer_U->ce1(window_buffer_ce1);
    window_buffer_U->we1(window_buffer_we1);
    window_buffer_U->d1(window_buffer_d1);
    window_buffer_U->q1(window_buffer_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_abscond1_fu_450_p2);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( tmp_11_fu_406_p2 );

    SC_METHOD(thread_abscond_fu_426_p2);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( tmp_5_fu_359_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( exitcond2_fu_209_p2 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( exitcond2_fu_209_p2 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_return);

    SC_METHOD(thread_ap_sig_bdd_109);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_128);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_148);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_161);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_173);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_186);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_205);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_81);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_88);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_98);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st10_fsm_9);
    sensitive << ( ap_sig_bdd_173 );

    SC_METHOD(thread_ap_sig_cseq_ST_st11_fsm_10);
    sensitive << ( ap_sig_bdd_161 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_27 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_98 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_109 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_bdd_81 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_bdd_128 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_bdd_88 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_bdd_148 );

    SC_METHOD(thread_ap_sig_cseq_ST_st8_fsm_7);
    sensitive << ( ap_sig_bdd_186 );

    SC_METHOD(thread_ap_sig_cseq_ST_st9_fsm_8);
    sensitive << ( ap_sig_bdd_205 );

    SC_METHOD(thread_exitcond1_fu_221_p2);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( j_reg_191 );

    SC_METHOD(thread_exitcond2_fu_209_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_reg_180 );

    SC_METHOD(thread_i_1_fu_215_p2);
    sensitive << ( i_reg_180 );

    SC_METHOD(thread_input_image_read);
    sensitive << ( input_image_empty_n );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_j_1_fu_227_p2);
    sensitive << ( j_reg_191 );

    SC_METHOD(thread_line_buffer_address0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( line_buffer_addr_2_reg_499 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_13_cast1_fu_243_p1 );
    sensitive << ( tmp_4_fu_259_p1 );

    SC_METHOD(thread_line_buffer_address1);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( line_buffer_addr_reg_493 );
    sensitive << ( tmp_17_cast1_fu_254_p1 );

    SC_METHOD(thread_line_buffer_ce0);
    sensitive << ( input_image_empty_n );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_line_buffer_ce1);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_line_buffer_d0);
    sensitive << ( input_image_dout );
    sensitive << ( line_buffer_q0 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_line_buffer_d1);
    sensitive << ( line_buffer_q1 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_line_buffer_we0);
    sensitive << ( input_image_empty_n );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_line_buffer_we1);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_output_image_din);
    sensitive << ( output_image_full_n );
    sensitive << ( tmp_20_reg_558 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );

    SC_METHOD(thread_output_image_write);
    sensitive << ( output_image_full_n );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );

    SC_METHOD(thread_p_neg4_fu_354_p2);
    sensitive << ( p_neg6_reg_548 );
    sensitive << ( tmp_3_cast_fu_347_p1 );

    SC_METHOD(thread_p_neg6_fu_312_p2);
    sensitive << ( tmp_12_cast_fu_308_p1 );
    sensitive << ( tmp_9_cast_fu_285_p1 );

    SC_METHOD(thread_p_neg7_cast_fu_397_p1);
    sensitive << ( p_neg7_reg_553 );

    SC_METHOD(thread_p_neg7_fu_334_p2);
    sensitive << ( tmp_10_fu_328_p2 );
    sensitive << ( tmp_10_cast1_fu_289_p1 );

    SC_METHOD(thread_p_neg9_fu_400_p2);
    sensitive << ( tmp_15_cast_fu_382_p1 );
    sensitive << ( p_neg7_cast_fu_397_p1 );

    SC_METHOD(thread_tmp_10_cast1_fu_289_p1);
    sensitive << ( window_buffer_load_4_reg_529 );

    SC_METHOD(thread_tmp_10_cast_fu_351_p1);
    sensitive << ( window_buffer_load_4_reg_529 );

    SC_METHOD(thread_tmp_10_fu_328_p2);
    sensitive << ( tmp_18_cast_fu_324_p1 );
    sensitive << ( tmp_9_cast2_fu_281_p1 );

    SC_METHOD(thread_tmp_11_fu_406_p2);
    sensitive << ( p_neg9_fu_400_p2 );
    sensitive << ( tmp_17_cast_fu_393_p1 );

    SC_METHOD(thread_tmp_12_cast_fu_308_p1);
    sensitive << ( tmp_s_fu_302_p2 );

    SC_METHOD(thread_tmp_12_fu_237_p2);
    sensitive << ( tmp_4_cast_fu_233_p1 );

    SC_METHOD(thread_tmp_13_cast1_fu_243_p1);
    sensitive << ( tmp_12_fu_237_p2 );

    SC_METHOD(thread_tmp_13_fu_248_p2);
    sensitive << ( tmp_4_cast_fu_233_p1 );

    SC_METHOD(thread_tmp_14_fu_432_p2);
    sensitive << ( tmp_16_fu_422_p1 );

    SC_METHOD(thread_tmp_15_cast_fu_382_p1);
    sensitive << ( tmp_6_fu_375_p3 );

    SC_METHOD(thread_tmp_15_fu_438_p3);
    sensitive << ( tmp_16_fu_422_p1 );
    sensitive << ( abscond_fu_426_p2 );
    sensitive << ( tmp_14_fu_432_p2 );

    SC_METHOD(thread_tmp_16_fu_422_p1);
    sensitive << ( tmp_5_fu_359_p2 );

    SC_METHOD(thread_tmp_17_cast1_fu_254_p1);
    sensitive << ( tmp_13_fu_248_p2 );

    SC_METHOD(thread_tmp_17_cast_fu_393_p1);
    sensitive << ( tmp_8_fu_386_p3 );

    SC_METHOD(thread_tmp_17_fu_446_p1);
    sensitive << ( tmp_11_fu_406_p2 );

    SC_METHOD(thread_tmp_18_cast_fu_324_p1);
    sensitive << ( tmp_9_fu_318_p2 );

    SC_METHOD(thread_tmp_18_fu_456_p2);
    sensitive << ( tmp_17_fu_446_p1 );

    SC_METHOD(thread_tmp_19_fu_462_p3);
    sensitive << ( tmp_17_fu_446_p1 );
    sensitive << ( abscond1_fu_450_p2 );
    sensitive << ( tmp_18_fu_456_p2 );

    SC_METHOD(thread_tmp_20_fu_470_p2);
    sensitive << ( tmp_15_fu_438_p3 );
    sensitive << ( tmp_19_fu_462_p3 );

    SC_METHOD(thread_tmp_3_cast_fu_347_p1);
    sensitive << ( tmp_3_fu_340_p3 );

    SC_METHOD(thread_tmp_3_fu_340_p3);
    sensitive << ( window_buffer_load_2_reg_523 );

    SC_METHOD(thread_tmp_4_cast_fu_233_p1);
    sensitive << ( j_reg_191 );

    SC_METHOD(thread_tmp_4_fu_259_p1);
    sensitive << ( j_reg_191 );

    SC_METHOD(thread_tmp_5_cast_fu_264_p1);
    sensitive << ( line_buffer_load_reg_511 );

    SC_METHOD(thread_tmp_5_fu_359_p2);
    sensitive << ( p_neg4_fu_354_p2 );
    sensitive << ( tmp_10_cast_fu_351_p1 );

    SC_METHOD(thread_tmp_6_fu_375_p3);
    sensitive << ( window_buffer_load_1_reg_505 );

    SC_METHOD(thread_tmp_7_cast_fu_274_p1);
    sensitive << ( tmp_7_fu_267_p3 );

    SC_METHOD(thread_tmp_7_fu_267_p3);
    sensitive << ( line_buffer_load_1_reg_517 );

    SC_METHOD(thread_tmp_8_cast_fu_278_p1);
    sensitive << ( input_image_read_reg_536 );

    SC_METHOD(thread_tmp_8_fu_386_p3);
    sensitive << ( window_buffer_load_5_reg_542 );

    SC_METHOD(thread_tmp_9_cast2_fu_281_p1);
    sensitive << ( reg_203 );

    SC_METHOD(thread_tmp_9_cast_fu_285_p1);
    sensitive << ( reg_203 );

    SC_METHOD(thread_tmp_9_fu_318_p2);
    sensitive << ( tmp_5_cast_fu_264_p1 );
    sensitive << ( tmp_8_cast_fu_278_p1 );

    SC_METHOD(thread_tmp_cast_fu_298_p1);
    sensitive << ( tmp_fu_292_p2 );

    SC_METHOD(thread_tmp_fu_292_p2);
    sensitive << ( tmp_5_cast_fu_264_p1 );
    sensitive << ( tmp_8_cast_fu_278_p1 );

    SC_METHOD(thread_tmp_s_fu_302_p2);
    sensitive << ( tmp_cast_fu_298_p1 );
    sensitive << ( tmp_7_cast_fu_274_p1 );

    SC_METHOD(thread_window_buffer_address0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_9 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_window_buffer_address1);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_window_buffer_ce0);
    sensitive << ( input_image_empty_n );
    sensitive << ( output_image_full_n );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_9 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_window_buffer_ce1);
    sensitive << ( input_image_empty_n );
    sensitive << ( output_image_full_n );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_window_buffer_d0);
    sensitive << ( reg_203 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( line_buffer_load_reg_511 );
    sensitive << ( window_buffer_load_2_reg_523 );
    sensitive << ( window_buffer_load_4_reg_529 );
    sensitive << ( input_image_read_reg_536 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_9 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_window_buffer_d1);
    sensitive << ( reg_203 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( window_buffer_load_1_reg_505 );
    sensitive << ( line_buffer_load_1_reg_517 );
    sensitive << ( window_buffer_load_5_reg_542 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_window_buffer_we0);
    sensitive << ( output_image_full_n );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_9 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_window_buffer_we1);
    sensitive << ( output_image_full_n );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( input_image_empty_n );
    sensitive << ( output_image_full_n );
    sensitive << ( exitcond2_fu_209_p2 );
    sensitive << ( exitcond1_fu_221_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sobel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_image_dout, "(port)input_image_dout");
    sc_trace(mVcdFile, input_image_empty_n, "(port)input_image_empty_n");
    sc_trace(mVcdFile, input_image_read, "(port)input_image_read");
    sc_trace(mVcdFile, output_image_din, "(port)output_image_din");
    sc_trace(mVcdFile, output_image_full_n, "(port)output_image_full_n");
    sc_trace(mVcdFile, output_image_write, "(port)output_image_write");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_27, "ap_sig_bdd_27");
    sc_trace(mVcdFile, line_buffer_address0, "line_buffer_address0");
    sc_trace(mVcdFile, line_buffer_ce0, "line_buffer_ce0");
    sc_trace(mVcdFile, line_buffer_we0, "line_buffer_we0");
    sc_trace(mVcdFile, line_buffer_d0, "line_buffer_d0");
    sc_trace(mVcdFile, line_buffer_q0, "line_buffer_q0");
    sc_trace(mVcdFile, line_buffer_address1, "line_buffer_address1");
    sc_trace(mVcdFile, line_buffer_ce1, "line_buffer_ce1");
    sc_trace(mVcdFile, line_buffer_we1, "line_buffer_we1");
    sc_trace(mVcdFile, line_buffer_d1, "line_buffer_d1");
    sc_trace(mVcdFile, line_buffer_q1, "line_buffer_q1");
    sc_trace(mVcdFile, window_buffer_address0, "window_buffer_address0");
    sc_trace(mVcdFile, window_buffer_ce0, "window_buffer_ce0");
    sc_trace(mVcdFile, window_buffer_we0, "window_buffer_we0");
    sc_trace(mVcdFile, window_buffer_d0, "window_buffer_d0");
    sc_trace(mVcdFile, window_buffer_q0, "window_buffer_q0");
    sc_trace(mVcdFile, window_buffer_address1, "window_buffer_address1");
    sc_trace(mVcdFile, window_buffer_ce1, "window_buffer_ce1");
    sc_trace(mVcdFile, window_buffer_we1, "window_buffer_we1");
    sc_trace(mVcdFile, window_buffer_d1, "window_buffer_d1");
    sc_trace(mVcdFile, window_buffer_q1, "window_buffer_q1");
    sc_trace(mVcdFile, reg_203, "reg_203");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_bdd_81, "ap_sig_bdd_81");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_bdd_88, "ap_sig_bdd_88");
    sc_trace(mVcdFile, exitcond2_fu_209_p2, "exitcond2_fu_209_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_98, "ap_sig_bdd_98");
    sc_trace(mVcdFile, i_1_fu_215_p2, "i_1_fu_215_p2");
    sc_trace(mVcdFile, i_1_reg_480, "i_1_reg_480");
    sc_trace(mVcdFile, j_1_fu_227_p2, "j_1_fu_227_p2");
    sc_trace(mVcdFile, j_1_reg_488, "j_1_reg_488");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_109, "ap_sig_bdd_109");
    sc_trace(mVcdFile, line_buffer_addr_reg_493, "line_buffer_addr_reg_493");
    sc_trace(mVcdFile, exitcond1_fu_221_p2, "exitcond1_fu_221_p2");
    sc_trace(mVcdFile, line_buffer_addr_2_reg_499, "line_buffer_addr_2_reg_499");
    sc_trace(mVcdFile, window_buffer_load_1_reg_505, "window_buffer_load_1_reg_505");
    sc_trace(mVcdFile, line_buffer_load_reg_511, "line_buffer_load_reg_511");
    sc_trace(mVcdFile, line_buffer_load_1_reg_517, "line_buffer_load_1_reg_517");
    sc_trace(mVcdFile, window_buffer_load_2_reg_523, "window_buffer_load_2_reg_523");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_bdd_128, "ap_sig_bdd_128");
    sc_trace(mVcdFile, window_buffer_load_4_reg_529, "window_buffer_load_4_reg_529");
    sc_trace(mVcdFile, input_image_read_reg_536, "input_image_read_reg_536");
    sc_trace(mVcdFile, window_buffer_load_5_reg_542, "window_buffer_load_5_reg_542");
    sc_trace(mVcdFile, p_neg6_fu_312_p2, "p_neg6_fu_312_p2");
    sc_trace(mVcdFile, p_neg6_reg_548, "p_neg6_reg_548");
    sc_trace(mVcdFile, p_neg7_fu_334_p2, "p_neg7_fu_334_p2");
    sc_trace(mVcdFile, p_neg7_reg_553, "p_neg7_reg_553");
    sc_trace(mVcdFile, tmp_20_fu_470_p2, "tmp_20_fu_470_p2");
    sc_trace(mVcdFile, tmp_20_reg_558, "tmp_20_reg_558");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_bdd_148, "ap_sig_bdd_148");
    sc_trace(mVcdFile, i_reg_180, "i_reg_180");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st11_fsm_10, "ap_sig_cseq_ST_st11_fsm_10");
    sc_trace(mVcdFile, ap_sig_bdd_161, "ap_sig_bdd_161");
    sc_trace(mVcdFile, j_reg_191, "j_reg_191");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st10_fsm_9, "ap_sig_cseq_ST_st10_fsm_9");
    sc_trace(mVcdFile, ap_sig_bdd_173, "ap_sig_bdd_173");
    sc_trace(mVcdFile, tmp_13_cast1_fu_243_p1, "tmp_13_cast1_fu_243_p1");
    sc_trace(mVcdFile, tmp_17_cast1_fu_254_p1, "tmp_17_cast1_fu_254_p1");
    sc_trace(mVcdFile, tmp_4_fu_259_p1, "tmp_4_fu_259_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st8_fsm_7, "ap_sig_cseq_ST_st8_fsm_7");
    sc_trace(mVcdFile, ap_sig_bdd_186, "ap_sig_bdd_186");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st9_fsm_8, "ap_sig_cseq_ST_st9_fsm_8");
    sc_trace(mVcdFile, ap_sig_bdd_205, "ap_sig_bdd_205");
    sc_trace(mVcdFile, tmp_4_cast_fu_233_p1, "tmp_4_cast_fu_233_p1");
    sc_trace(mVcdFile, tmp_12_fu_237_p2, "tmp_12_fu_237_p2");
    sc_trace(mVcdFile, tmp_13_fu_248_p2, "tmp_13_fu_248_p2");
    sc_trace(mVcdFile, tmp_7_fu_267_p3, "tmp_7_fu_267_p3");
    sc_trace(mVcdFile, tmp_5_cast_fu_264_p1, "tmp_5_cast_fu_264_p1");
    sc_trace(mVcdFile, tmp_8_cast_fu_278_p1, "tmp_8_cast_fu_278_p1");
    sc_trace(mVcdFile, tmp_fu_292_p2, "tmp_fu_292_p2");
    sc_trace(mVcdFile, tmp_cast_fu_298_p1, "tmp_cast_fu_298_p1");
    sc_trace(mVcdFile, tmp_7_cast_fu_274_p1, "tmp_7_cast_fu_274_p1");
    sc_trace(mVcdFile, tmp_s_fu_302_p2, "tmp_s_fu_302_p2");
    sc_trace(mVcdFile, tmp_12_cast_fu_308_p1, "tmp_12_cast_fu_308_p1");
    sc_trace(mVcdFile, tmp_9_cast_fu_285_p1, "tmp_9_cast_fu_285_p1");
    sc_trace(mVcdFile, tmp_9_fu_318_p2, "tmp_9_fu_318_p2");
    sc_trace(mVcdFile, tmp_18_cast_fu_324_p1, "tmp_18_cast_fu_324_p1");
    sc_trace(mVcdFile, tmp_9_cast2_fu_281_p1, "tmp_9_cast2_fu_281_p1");
    sc_trace(mVcdFile, tmp_10_fu_328_p2, "tmp_10_fu_328_p2");
    sc_trace(mVcdFile, tmp_10_cast1_fu_289_p1, "tmp_10_cast1_fu_289_p1");
    sc_trace(mVcdFile, tmp_3_fu_340_p3, "tmp_3_fu_340_p3");
    sc_trace(mVcdFile, tmp_3_cast_fu_347_p1, "tmp_3_cast_fu_347_p1");
    sc_trace(mVcdFile, p_neg4_fu_354_p2, "p_neg4_fu_354_p2");
    sc_trace(mVcdFile, tmp_10_cast_fu_351_p1, "tmp_10_cast_fu_351_p1");
    sc_trace(mVcdFile, tmp_5_fu_359_p2, "tmp_5_fu_359_p2");
    sc_trace(mVcdFile, tmp_6_fu_375_p3, "tmp_6_fu_375_p3");
    sc_trace(mVcdFile, tmp_8_fu_386_p3, "tmp_8_fu_386_p3");
    sc_trace(mVcdFile, tmp_15_cast_fu_382_p1, "tmp_15_cast_fu_382_p1");
    sc_trace(mVcdFile, p_neg7_cast_fu_397_p1, "p_neg7_cast_fu_397_p1");
    sc_trace(mVcdFile, p_neg9_fu_400_p2, "p_neg9_fu_400_p2");
    sc_trace(mVcdFile, tmp_17_cast_fu_393_p1, "tmp_17_cast_fu_393_p1");
    sc_trace(mVcdFile, tmp_11_fu_406_p2, "tmp_11_fu_406_p2");
    sc_trace(mVcdFile, tmp_16_fu_422_p1, "tmp_16_fu_422_p1");
    sc_trace(mVcdFile, abscond_fu_426_p2, "abscond_fu_426_p2");
    sc_trace(mVcdFile, tmp_14_fu_432_p2, "tmp_14_fu_432_p2");
    sc_trace(mVcdFile, tmp_17_fu_446_p1, "tmp_17_fu_446_p1");
    sc_trace(mVcdFile, abscond1_fu_450_p2, "abscond1_fu_450_p2");
    sc_trace(mVcdFile, tmp_18_fu_456_p2, "tmp_18_fu_456_p2");
    sc_trace(mVcdFile, tmp_15_fu_438_p3, "tmp_15_fu_438_p3");
    sc_trace(mVcdFile, tmp_19_fu_462_p3, "tmp_19_fu_462_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sobel.hdltvin.dat");
    mHdltvoutHandle.open("sobel.hdltvout.dat");
}

sobel::~sobel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete line_buffer_U;
    delete window_buffer_U;
}

void sobel::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_10.read())) {
        i_reg_180 = i_1_reg_480.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_180 = ap_const_lv9_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_9.read())) {
        j_reg_191 = j_1_reg_488.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                esl_seteq<1,1,1>(exitcond2_fu_209_p2.read(), ap_const_lv1_0))) {
        j_reg_191 = ap_const_lv10_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        i_1_reg_480 = i_1_fu_215_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && !esl_seteq<1,1,1>(input_image_empty_n.read(), ap_const_logic_0))) {
        input_image_read_reg_536 = input_image_dout.read();
        window_buffer_load_2_reg_523 = window_buffer_q0.read();
        window_buffer_load_4_reg_529 = window_buffer_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        j_1_reg_488 = j_1_fu_227_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && esl_seteq<1,1,1>(exitcond1_fu_221_p2.read(), ap_const_lv1_0))) {
        line_buffer_addr_2_reg_499 =  (sc_lv<11>) (tmp_17_cast1_fu_254_p1.read());
        line_buffer_addr_reg_493 =  (sc_lv<11>) (tmp_13_cast1_fu_243_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        line_buffer_load_1_reg_517 = line_buffer_q1.read();
        line_buffer_load_reg_511 = line_buffer_q0.read();
        window_buffer_load_1_reg_505 = window_buffer_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        p_neg6_reg_548 = p_neg6_fu_312_p2.read();
        p_neg7_reg_553 = p_neg7_fu_334_p2.read();
        window_buffer_load_5_reg_542 = window_buffer_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()))) {
        reg_203 = window_buffer_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        tmp_20_reg_558 = tmp_20_fu_470_p2.read();
    }
}

void sobel::thread_abscond1_fu_450_p2() {
    abscond1_fu_450_p2 = (!tmp_11_fu_406_p2.read().is_01() || !ap_const_lv11_0.is_01())? sc_lv<1>(): (sc_bigint<11>(tmp_11_fu_406_p2.read()) > sc_bigint<11>(ap_const_lv11_0));
}

void sobel::thread_abscond_fu_426_p2() {
    abscond_fu_426_p2 = (!tmp_5_fu_359_p2.read().is_01() || !ap_const_lv11_0.is_01())? sc_lv<1>(): (sc_bigint<11>(tmp_5_fu_359_p2.read()) > sc_bigint<11>(ap_const_lv11_0));
}

void sobel::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond2_fu_209_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sobel::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sobel::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond2_fu_209_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sobel::thread_ap_return() {
    ap_return = ap_const_lv32_0;
}

void sobel::thread_ap_sig_bdd_109() {
    ap_sig_bdd_109 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void sobel::thread_ap_sig_bdd_128() {
    ap_sig_bdd_128 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void sobel::thread_ap_sig_bdd_148() {
    ap_sig_bdd_148 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void sobel::thread_ap_sig_bdd_161() {
    ap_sig_bdd_161 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(10, 10));
}

void sobel::thread_ap_sig_bdd_173() {
    ap_sig_bdd_173 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(9, 9));
}

void sobel::thread_ap_sig_bdd_186() {
    ap_sig_bdd_186 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void sobel::thread_ap_sig_bdd_205() {
    ap_sig_bdd_205 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(8, 8));
}

void sobel::thread_ap_sig_bdd_27() {
    ap_sig_bdd_27 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void sobel::thread_ap_sig_bdd_81() {
    ap_sig_bdd_81 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void sobel::thread_ap_sig_bdd_88() {
    ap_sig_bdd_88 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void sobel::thread_ap_sig_bdd_98() {
    ap_sig_bdd_98 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void sobel::thread_ap_sig_cseq_ST_st10_fsm_9() {
    if (ap_sig_bdd_173.read()) {
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    }
}

void sobel::thread_ap_sig_cseq_ST_st11_fsm_10() {
    if (ap_sig_bdd_161.read()) {
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    }
}

void sobel::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_27.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void sobel::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_98.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void sobel::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_109.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void sobel::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_bdd_81.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void sobel::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_bdd_128.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void sobel::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_bdd_88.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void sobel::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_bdd_148.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void sobel::thread_ap_sig_cseq_ST_st8_fsm_7() {
    if (ap_sig_bdd_186.read()) {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    }
}

void sobel::thread_ap_sig_cseq_ST_st9_fsm_8() {
    if (ap_sig_bdd_205.read()) {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    }
}

void sobel::thread_exitcond1_fu_221_p2() {
    exitcond1_fu_221_p2 = (!j_reg_191.read().is_01() || !ap_const_lv10_280.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_191.read() == ap_const_lv10_280);
}

void sobel::thread_exitcond2_fu_209_p2() {
    exitcond2_fu_209_p2 = (!i_reg_180.read().is_01() || !ap_const_lv9_1E0.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_180.read() == ap_const_lv9_1E0);
}

void sobel::thread_i_1_fu_215_p2() {
    i_1_fu_215_p2 = (!i_reg_180.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(i_reg_180.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void sobel::thread_input_image_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
         !esl_seteq<1,1,1>(input_image_empty_n.read(), ap_const_logic_0))) {
        input_image_read = ap_const_logic_1;
    } else {
        input_image_read = ap_const_logic_0;
    }
}

void sobel::thread_j_1_fu_227_p2() {
    j_1_fu_227_p2 = (!j_reg_191.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j_reg_191.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void sobel::thread_line_buffer_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        line_buffer_address0 = line_buffer_addr_2_reg_499.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        line_buffer_address0 =  (sc_lv<11>) (tmp_4_fu_259_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        line_buffer_address0 =  (sc_lv<11>) (tmp_13_cast1_fu_243_p1.read());
    } else {
        line_buffer_address0 = "XXXXXXXXXXX";
    }
}

void sobel::thread_line_buffer_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        line_buffer_address1 = line_buffer_addr_reg_493.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        line_buffer_address1 =  (sc_lv<11>) (tmp_17_cast1_fu_254_p1.read());
    } else {
        line_buffer_address1 = "XXXXXXXXXXX";
    }
}

void sobel::thread_line_buffer_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
          !esl_seteq<1,1,1>(input_image_empty_n.read(), ap_const_logic_0)))) {
        line_buffer_ce0 = ap_const_logic_1;
    } else {
        line_buffer_ce0 = ap_const_logic_0;
    }
}

void sobel::thread_line_buffer_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()))) {
        line_buffer_ce1 = ap_const_logic_1;
    } else {
        line_buffer_ce1 = ap_const_logic_0;
    }
}

void sobel::thread_line_buffer_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        line_buffer_d0 = input_image_dout.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        line_buffer_d0 = line_buffer_q0.read();
    } else {
        line_buffer_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sobel::thread_line_buffer_d1() {
    line_buffer_d1 = line_buffer_q1.read();
}

void sobel::thread_line_buffer_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
          !esl_seteq<1,1,1>(input_image_empty_n.read(), ap_const_logic_0)))) {
        line_buffer_we0 = ap_const_logic_1;
    } else {
        line_buffer_we0 = ap_const_logic_0;
    }
}

void sobel::thread_line_buffer_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()))) {
        line_buffer_we1 = ap_const_logic_1;
    } else {
        line_buffer_we1 = ap_const_logic_0;
    }
}

void sobel::thread_output_image_din() {
    output_image_din = tmp_20_reg_558.read();
}

void sobel::thread_output_image_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && 
         !esl_seteq<1,1,1>(output_image_full_n.read(), ap_const_logic_0))) {
        output_image_write = ap_const_logic_1;
    } else {
        output_image_write = ap_const_logic_0;
    }
}

void sobel::thread_p_neg4_fu_354_p2() {
    p_neg4_fu_354_p2 = (!p_neg6_reg_548.read().is_01() || !tmp_3_cast_fu_347_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(p_neg6_reg_548.read()) - sc_biguint<11>(tmp_3_cast_fu_347_p1.read()));
}

void sobel::thread_p_neg6_fu_312_p2() {
    p_neg6_fu_312_p2 = (!tmp_12_cast_fu_308_p1.read().is_01() || !tmp_9_cast_fu_285_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_12_cast_fu_308_p1.read()) - sc_biguint<11>(tmp_9_cast_fu_285_p1.read()));
}

void sobel::thread_p_neg7_cast_fu_397_p1() {
    p_neg7_cast_fu_397_p1 = esl_sext<11,10>(p_neg7_reg_553.read());
}

void sobel::thread_p_neg7_fu_334_p2() {
    p_neg7_fu_334_p2 = (!tmp_10_fu_328_p2.read().is_01() || !tmp_10_cast1_fu_289_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_10_fu_328_p2.read()) - sc_biguint<10>(tmp_10_cast1_fu_289_p1.read()));
}

void sobel::thread_p_neg9_fu_400_p2() {
    p_neg9_fu_400_p2 = (!tmp_15_cast_fu_382_p1.read().is_01() || !p_neg7_cast_fu_397_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_15_cast_fu_382_p1.read()) + sc_bigint<11>(p_neg7_cast_fu_397_p1.read()));
}

void sobel::thread_tmp_10_cast1_fu_289_p1() {
    tmp_10_cast1_fu_289_p1 = esl_zext<10,8>(window_buffer_load_4_reg_529.read());
}

void sobel::thread_tmp_10_cast_fu_351_p1() {
    tmp_10_cast_fu_351_p1 = esl_zext<11,8>(window_buffer_load_4_reg_529.read());
}

void sobel::thread_tmp_10_fu_328_p2() {
    tmp_10_fu_328_p2 = (!tmp_18_cast_fu_324_p1.read().is_01() || !tmp_9_cast2_fu_281_p1.read().is_01())? sc_lv<10>(): (sc_bigint<10>(tmp_18_cast_fu_324_p1.read()) + sc_biguint<10>(tmp_9_cast2_fu_281_p1.read()));
}

void sobel::thread_tmp_11_fu_406_p2() {
    tmp_11_fu_406_p2 = (!p_neg9_fu_400_p2.read().is_01() || !tmp_17_cast_fu_393_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(p_neg9_fu_400_p2.read()) - sc_biguint<11>(tmp_17_cast_fu_393_p1.read()));
}

void sobel::thread_tmp_12_cast_fu_308_p1() {
    tmp_12_cast_fu_308_p1 = esl_zext<11,10>(tmp_s_fu_302_p2.read());
}

void sobel::thread_tmp_12_fu_237_p2() {
    tmp_12_fu_237_p2 = (!ap_const_lv11_280.is_01() || !tmp_4_cast_fu_233_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(ap_const_lv11_280) + sc_biguint<11>(tmp_4_cast_fu_233_p1.read()));
}

void sobel::thread_tmp_13_cast1_fu_243_p1() {
    tmp_13_cast1_fu_243_p1 = esl_zext<64,11>(tmp_12_fu_237_p2.read());
}

void sobel::thread_tmp_13_fu_248_p2() {
    tmp_13_fu_248_p2 = (!ap_const_lv11_500.is_01() || !tmp_4_cast_fu_233_p1.read().is_01())? sc_lv<11>(): (sc_bigint<11>(ap_const_lv11_500) + sc_biguint<11>(tmp_4_cast_fu_233_p1.read()));
}

void sobel::thread_tmp_14_fu_432_p2() {
    tmp_14_fu_432_p2 = (!ap_const_lv8_0.is_01() || !tmp_16_fu_422_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_0) - sc_biguint<8>(tmp_16_fu_422_p1.read()));
}

void sobel::thread_tmp_15_cast_fu_382_p1() {
    tmp_15_cast_fu_382_p1 = esl_zext<11,9>(tmp_6_fu_375_p3.read());
}

void sobel::thread_tmp_15_fu_438_p3() {
    tmp_15_fu_438_p3 = (!abscond_fu_426_p2.read()[0].is_01())? sc_lv<8>(): ((abscond_fu_426_p2.read()[0].to_bool())? tmp_16_fu_422_p1.read(): tmp_14_fu_432_p2.read());
}

void sobel::thread_tmp_16_fu_422_p1() {
    tmp_16_fu_422_p1 = tmp_5_fu_359_p2.read().range(8-1, 0);
}

void sobel::thread_tmp_17_cast1_fu_254_p1() {
    tmp_17_cast1_fu_254_p1 = esl_zext<64,11>(tmp_13_fu_248_p2.read());
}

void sobel::thread_tmp_17_cast_fu_393_p1() {
    tmp_17_cast_fu_393_p1 = esl_zext<11,9>(tmp_8_fu_386_p3.read());
}

void sobel::thread_tmp_17_fu_446_p1() {
    tmp_17_fu_446_p1 = tmp_11_fu_406_p2.read().range(8-1, 0);
}

void sobel::thread_tmp_18_cast_fu_324_p1() {
    tmp_18_cast_fu_324_p1 = esl_sext<10,9>(tmp_9_fu_318_p2.read());
}

void sobel::thread_tmp_18_fu_456_p2() {
    tmp_18_fu_456_p2 = (!ap_const_lv8_0.is_01() || !tmp_17_fu_446_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_0) - sc_biguint<8>(tmp_17_fu_446_p1.read()));
}

void sobel::thread_tmp_19_fu_462_p3() {
    tmp_19_fu_462_p3 = (!abscond1_fu_450_p2.read()[0].is_01())? sc_lv<8>(): ((abscond1_fu_450_p2.read()[0].to_bool())? tmp_17_fu_446_p1.read(): tmp_18_fu_456_p2.read());
}

void sobel::thread_tmp_20_fu_470_p2() {
    tmp_20_fu_470_p2 = (!tmp_15_fu_438_p3.read().is_01() || !tmp_19_fu_462_p3.read().is_01())? sc_lv<8>(): (sc_biguint<8>(tmp_15_fu_438_p3.read()) + sc_biguint<8>(tmp_19_fu_462_p3.read()));
}

void sobel::thread_tmp_3_cast_fu_347_p1() {
    tmp_3_cast_fu_347_p1 = esl_zext<11,9>(tmp_3_fu_340_p3.read());
}

void sobel::thread_tmp_3_fu_340_p3() {
    tmp_3_fu_340_p3 = esl_concat<8,1>(window_buffer_load_2_reg_523.read(), ap_const_lv1_0);
}

void sobel::thread_tmp_4_cast_fu_233_p1() {
    tmp_4_cast_fu_233_p1 = esl_zext<11,10>(j_reg_191.read());
}

void sobel::thread_tmp_4_fu_259_p1() {
    tmp_4_fu_259_p1 = esl_zext<64,10>(j_reg_191.read());
}

void sobel::thread_tmp_5_cast_fu_264_p1() {
    tmp_5_cast_fu_264_p1 = esl_zext<9,8>(line_buffer_load_reg_511.read());
}

void sobel::thread_tmp_5_fu_359_p2() {
    tmp_5_fu_359_p2 = (!p_neg4_fu_354_p2.read().is_01() || !tmp_10_cast_fu_351_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(p_neg4_fu_354_p2.read()) - sc_biguint<11>(tmp_10_cast_fu_351_p1.read()));
}

void sobel::thread_tmp_6_fu_375_p3() {
    tmp_6_fu_375_p3 = esl_concat<8,1>(window_buffer_load_1_reg_505.read(), ap_const_lv1_0);
}

void sobel::thread_tmp_7_cast_fu_274_p1() {
    tmp_7_cast_fu_274_p1 = esl_zext<10,9>(tmp_7_fu_267_p3.read());
}

void sobel::thread_tmp_7_fu_267_p3() {
    tmp_7_fu_267_p3 = esl_concat<8,1>(line_buffer_load_1_reg_517.read(), ap_const_lv1_0);
}

void sobel::thread_tmp_8_cast_fu_278_p1() {
    tmp_8_cast_fu_278_p1 = esl_zext<9,8>(input_image_read_reg_536.read());
}

void sobel::thread_tmp_8_fu_386_p3() {
    tmp_8_fu_386_p3 = esl_concat<8,1>(window_buffer_load_5_reg_542.read(), ap_const_lv1_0);
}

void sobel::thread_tmp_9_cast2_fu_281_p1() {
    tmp_9_cast2_fu_281_p1 = esl_zext<10,8>(reg_203.read());
}

void sobel::thread_tmp_9_cast_fu_285_p1() {
    tmp_9_cast_fu_285_p1 = esl_zext<11,8>(reg_203.read());
}

void sobel::thread_tmp_9_fu_318_p2() {
    tmp_9_fu_318_p2 = (!tmp_5_cast_fu_264_p1.read().is_01() || !tmp_8_cast_fu_278_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_5_cast_fu_264_p1.read()) - sc_biguint<9>(tmp_8_cast_fu_278_p1.read()));
}

void sobel::thread_tmp_cast_fu_298_p1() {
    tmp_cast_fu_298_p1 = esl_zext<10,9>(tmp_fu_292_p2.read());
}

void sobel::thread_tmp_fu_292_p2() {
    tmp_fu_292_p2 = (!tmp_5_cast_fu_264_p1.read().is_01() || !tmp_8_cast_fu_278_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_5_cast_fu_264_p1.read()) + sc_biguint<9>(tmp_8_cast_fu_278_p1.read()));
}

void sobel::thread_tmp_s_fu_302_p2() {
    tmp_s_fu_302_p2 = (!tmp_cast_fu_298_p1.read().is_01() || !tmp_7_cast_fu_274_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_cast_fu_298_p1.read()) + sc_biguint<10>(tmp_7_cast_fu_274_p1.read()));
}

void sobel::thread_window_buffer_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_9.read())) {
        window_buffer_address0 = ap_const_lv4_8;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read())) {
        window_buffer_address0 = ap_const_lv4_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read())) {
        window_buffer_address0 = ap_const_lv4_6;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        window_buffer_address0 = ap_const_lv4_3;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        window_buffer_address0 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        window_buffer_address0 = ap_const_lv4_5;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        window_buffer_address0 = ap_const_lv4_4;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        window_buffer_address0 = ap_const_lv4_1;
    } else {
        window_buffer_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void sobel::thread_window_buffer_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read())) {
        window_buffer_address1 = ap_const_lv4_5;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        window_buffer_address1 = ap_const_lv4_4;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        window_buffer_address1 = ap_const_lv4_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        window_buffer_address1 = ap_const_lv4_8;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()))) {
        window_buffer_address1 = ap_const_lv4_7;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        window_buffer_address1 = ap_const_lv4_2;
    } else {
        window_buffer_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void sobel::thread_window_buffer_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
          !esl_seteq<1,1,1>(input_image_empty_n.read(), ap_const_logic_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_9.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && 
          !esl_seteq<1,1,1>(output_image_full_n.read(), ap_const_logic_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read()))) {
        window_buffer_ce0 = ap_const_logic_1;
    } else {
        window_buffer_ce0 = ap_const_logic_0;
    }
}

void sobel::thread_window_buffer_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
          !esl_seteq<1,1,1>(input_image_empty_n.read(), ap_const_logic_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && 
          !esl_seteq<1,1,1>(output_image_full_n.read(), ap_const_logic_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read()))) {
        window_buffer_ce1 = ap_const_logic_1;
    } else {
        window_buffer_ce1 = ap_const_logic_0;
    }
}

void sobel::thread_window_buffer_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_9.read())) {
        window_buffer_d0 = input_image_read_reg_536.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read())) {
        window_buffer_d0 = line_buffer_load_reg_511.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read())) {
        window_buffer_d0 = window_buffer_load_4_reg_529.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        window_buffer_d0 = window_buffer_load_2_reg_523.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        window_buffer_d0 = reg_203.read();
    } else {
        window_buffer_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sobel::thread_window_buffer_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read())) {
        window_buffer_d1 = line_buffer_load_1_reg_517.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read())) {
        window_buffer_d1 = window_buffer_load_5_reg_542.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        window_buffer_d1 = reg_203.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        window_buffer_d1 = window_buffer_load_1_reg_505.read();
    } else {
        window_buffer_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sobel::thread_window_buffer_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_9.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && 
          !esl_seteq<1,1,1>(output_image_full_n.read(), ap_const_logic_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read()))) {
        window_buffer_we0 = ap_const_logic_1;
    } else {
        window_buffer_we0 = ap_const_logic_0;
    }
}

void sobel::thread_window_buffer_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && 
          !esl_seteq<1,1,1>(output_image_full_n.read(), ap_const_logic_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read()))) {
        window_buffer_we1 = ap_const_logic_1;
    } else {
        window_buffer_we1 = ap_const_logic_0;
    }
}

void sobel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond2_fu_209_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(exitcond1_fu_221_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st11_fsm_10;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            if (!esl_seteq<1,1,1>(input_image_empty_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 128 : 
            if (!esl_seteq<1,1,1>(output_image_full_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st9_fsm_8;
            } else {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXX";
            break;
    }
}

void sobel::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_image_dout\" :  \"" << input_image_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_image_empty_n\" :  \"" << input_image_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_image_read\" :  \"" << input_image_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_image_din\" :  \"" << output_image_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"output_image_full_n\" :  \"" << output_image_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_image_write\" :  \"" << output_image_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

