// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.935250,HLS_SYN_LAT=2459041,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=164,HLS_SYN_LUT=248}" *)

module sobel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_image_dout,
        input_image_empty_n,
        input_image_read,
        output_image_din,
        output_image_full_n,
        output_image_write,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 11'b1;
parameter    ap_ST_st2_fsm_1 = 11'b10;
parameter    ap_ST_st3_fsm_2 = 11'b100;
parameter    ap_ST_st4_fsm_3 = 11'b1000;
parameter    ap_ST_st5_fsm_4 = 11'b10000;
parameter    ap_ST_st6_fsm_5 = 11'b100000;
parameter    ap_ST_st7_fsm_6 = 11'b1000000;
parameter    ap_ST_st8_fsm_7 = 11'b10000000;
parameter    ap_ST_st9_fsm_8 = 11'b100000000;
parameter    ap_ST_st10_fsm_9 = 11'b1000000000;
parameter    ap_ST_st11_fsm_10 = 11'b10000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv4_4 = 4'b100;
parameter    ap_const_lv4_5 = 4'b101;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_3 = 4'b11;
parameter    ap_const_lv4_6 = 4'b110;
parameter    ap_const_lv4_2 = 4'b10;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_7 = 4'b111;
parameter    ap_const_lv9_1E0 = 9'b111100000;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv10_280 = 10'b1010000000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv11_280 = 11'b1010000000;
parameter    ap_const_lv11_500 = 11'b10100000000;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] input_image_dout;
input   input_image_empty_n;
output   input_image_read;
output  [7:0] output_image_din;
input   output_image_full_n;
output   output_image_write;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_image_read;
reg output_image_write;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm = 11'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_27;
reg   [10:0] line_buffer_address0;
reg    line_buffer_ce0;
reg    line_buffer_we0;
reg   [7:0] line_buffer_d0;
wire   [7:0] line_buffer_q0;
reg   [10:0] line_buffer_address1;
reg    line_buffer_ce1;
reg    line_buffer_we1;
wire   [7:0] line_buffer_d1;
wire   [7:0] line_buffer_q1;
reg   [3:0] window_buffer_address0;
reg    window_buffer_ce0;
reg    window_buffer_we0;
reg   [7:0] window_buffer_d0;
wire   [7:0] window_buffer_q0;
reg   [3:0] window_buffer_address1;
reg    window_buffer_ce1;
reg    window_buffer_we1;
reg   [7:0] window_buffer_d1;
wire   [7:0] window_buffer_q1;
reg   [7:0] reg_203;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_81;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_88;
wire   [0:0] exitcond2_fu_209_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_98;
wire   [8:0] i_1_fu_215_p2;
reg   [8:0] i_1_reg_480;
wire   [9:0] j_1_fu_227_p2;
reg   [9:0] j_1_reg_488;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_109;
reg   [10:0] line_buffer_addr_reg_493;
wire   [0:0] exitcond1_fu_221_p2;
reg   [10:0] line_buffer_addr_2_reg_499;
reg   [7:0] window_buffer_load_1_reg_505;
reg   [7:0] line_buffer_load_reg_511;
reg   [7:0] line_buffer_load_1_reg_517;
reg   [7:0] window_buffer_load_2_reg_523;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_128;
reg   [7:0] window_buffer_load_4_reg_529;
reg   [7:0] input_image_read_reg_536;
reg   [7:0] window_buffer_load_5_reg_542;
wire   [10:0] p_neg6_fu_312_p2;
reg   [10:0] p_neg6_reg_548;
wire   [9:0] p_neg7_fu_334_p2;
reg   [9:0] p_neg7_reg_553;
wire   [7:0] tmp_20_fu_470_p2;
reg   [7:0] tmp_20_reg_558;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_148;
reg   [8:0] i_reg_180;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_161;
reg   [9:0] j_reg_191;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_173;
wire   [63:0] tmp_13_cast1_fu_243_p1;
wire   [63:0] tmp_17_cast1_fu_254_p1;
wire   [63:0] tmp_4_fu_259_p1;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_186;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_205;
wire   [10:0] tmp_4_cast_fu_233_p1;
wire   [10:0] tmp_12_fu_237_p2;
wire   [10:0] tmp_13_fu_248_p2;
wire   [8:0] tmp_7_fu_267_p3;
wire   [8:0] tmp_5_cast_fu_264_p1;
wire   [8:0] tmp_8_cast_fu_278_p1;
wire   [8:0] tmp_fu_292_p2;
wire   [9:0] tmp_cast_fu_298_p1;
wire   [9:0] tmp_7_cast_fu_274_p1;
wire   [9:0] tmp_s_fu_302_p2;
wire   [10:0] tmp_12_cast_fu_308_p1;
wire   [10:0] tmp_9_cast_fu_285_p1;
wire   [8:0] tmp_9_fu_318_p2;
wire  signed [9:0] tmp_18_cast_fu_324_p1;
wire   [9:0] tmp_9_cast2_fu_281_p1;
wire   [9:0] tmp_10_fu_328_p2;
wire   [9:0] tmp_10_cast1_fu_289_p1;
wire   [8:0] tmp_3_fu_340_p3;
wire   [10:0] tmp_3_cast_fu_347_p1;
wire   [10:0] p_neg4_fu_354_p2;
wire   [10:0] tmp_10_cast_fu_351_p1;
wire   [10:0] tmp_5_fu_359_p2;
wire   [8:0] tmp_6_fu_375_p3;
wire   [8:0] tmp_8_fu_386_p3;
wire   [10:0] tmp_15_cast_fu_382_p1;
wire  signed [10:0] p_neg7_cast_fu_397_p1;
wire   [10:0] p_neg9_fu_400_p2;
wire   [10:0] tmp_17_cast_fu_393_p1;
wire   [10:0] tmp_11_fu_406_p2;
wire   [7:0] tmp_16_fu_422_p1;
wire   [0:0] abscond_fu_426_p2;
wire   [7:0] tmp_14_fu_432_p2;
wire   [7:0] tmp_17_fu_446_p1;
wire   [0:0] abscond1_fu_450_p2;
wire   [7:0] tmp_18_fu_456_p2;
wire   [7:0] tmp_15_fu_438_p3;
wire   [7:0] tmp_19_fu_462_p3;
reg   [10:0] ap_NS_fsm;


sobel_line_buffer #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
line_buffer_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( line_buffer_address0 ),
    .ce0( line_buffer_ce0 ),
    .we0( line_buffer_we0 ),
    .d0( line_buffer_d0 ),
    .q0( line_buffer_q0 ),
    .address1( line_buffer_address1 ),
    .ce1( line_buffer_ce1 ),
    .we1( line_buffer_we1 ),
    .d1( line_buffer_d1 ),
    .q1( line_buffer_q1 )
);

sobel_window_buffer #(
    .DataWidth( 8 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
window_buffer_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( window_buffer_address0 ),
    .ce0( window_buffer_ce0 ),
    .we0( window_buffer_we0 ),
    .d0( window_buffer_d0 ),
    .q0( window_buffer_q0 ),
    .address1( window_buffer_address1 ),
    .ce1( window_buffer_ce1 ),
    .we1( window_buffer_we1 ),
    .d1( window_buffer_d1 ),
    .q1( window_buffer_q1 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        i_reg_180 <= i_1_reg_480;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_180 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        j_reg_191 <= j_1_reg_488;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_fu_209_p2 == ap_const_lv1_0))) begin
        j_reg_191 <= ap_const_lv10_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_1_reg_480 <= i_1_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(input_image_empty_n == ap_const_logic_0))) begin
        input_image_read_reg_536 <= input_image_dout;
        window_buffer_load_2_reg_523 <= window_buffer_q0;
        window_buffer_load_4_reg_529 <= window_buffer_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_1_reg_488 <= j_1_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond1_fu_221_p2 == ap_const_lv1_0))) begin
        line_buffer_addr_2_reg_499 <= tmp_17_cast1_fu_254_p1;
        line_buffer_addr_reg_493 <= tmp_13_cast1_fu_243_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        line_buffer_load_1_reg_517 <= line_buffer_q1;
        line_buffer_load_reg_511 <= line_buffer_q0;
        window_buffer_load_1_reg_505 <= window_buffer_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        p_neg6_reg_548 <= p_neg6_fu_312_p2;
        p_neg7_reg_553 <= p_neg7_fu_334_p2;
        window_buffer_load_5_reg_542 <= window_buffer_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | (ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5))) begin
        reg_203 <= window_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        tmp_20_reg_558 <= tmp_20_fu_470_p2;
    end
end

always @ (exitcond2_fu_209_p2 or ap_sig_cseq_ST_st2_fsm_1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_fu_209_p2 == ap_const_lv1_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (exitcond2_fu_209_p2 or ap_sig_cseq_ST_st2_fsm_1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_fu_209_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_173) begin
    if (ap_sig_bdd_173) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_161) begin
    if (ap_sig_bdd_161) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_27) begin
    if (ap_sig_bdd_27) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_98) begin
    if (ap_sig_bdd_98) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_109) begin
    if (ap_sig_bdd_109) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_81) begin
    if (ap_sig_bdd_81) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_128) begin
    if (ap_sig_bdd_128) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_88) begin
    if (ap_sig_bdd_88) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_148) begin
    if (ap_sig_bdd_148) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_186) begin
    if (ap_sig_bdd_186) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_205) begin
    if (ap_sig_bdd_205) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

always @ (input_image_empty_n or ap_sig_cseq_ST_st5_fsm_4) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(input_image_empty_n == ap_const_logic_0))) begin
        input_image_read = ap_const_logic_1;
    end else begin
        input_image_read = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st3_fsm_2 or line_buffer_addr_2_reg_499 or ap_sig_cseq_ST_st5_fsm_4 or tmp_13_cast1_fu_243_p1 or tmp_4_fu_259_p1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        line_buffer_address0 = line_buffer_addr_2_reg_499;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        line_buffer_address0 = tmp_4_fu_259_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        line_buffer_address0 = tmp_13_cast1_fu_243_p1;
    end else begin
        line_buffer_address0 = 'bx;
    end
end

always @ (ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st3_fsm_2 or line_buffer_addr_reg_493 or tmp_17_cast1_fu_254_p1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        line_buffer_address1 = line_buffer_addr_reg_493;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        line_buffer_address1 = tmp_17_cast1_fu_254_p1;
    end else begin
        line_buffer_address1 = 'bx;
    end
end

always @ (input_image_empty_n or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st5_fsm_4) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(input_image_empty_n == ap_const_logic_0)))) begin
        line_buffer_ce0 = ap_const_logic_1;
    end else begin
        line_buffer_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st3_fsm_2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2))) begin
        line_buffer_ce1 = ap_const_logic_1;
    end else begin
        line_buffer_ce1 = ap_const_logic_0;
    end
end

always @ (input_image_dout or line_buffer_q0 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st5_fsm_4) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        line_buffer_d0 = input_image_dout;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        line_buffer_d0 = line_buffer_q0;
    end else begin
        line_buffer_d0 = 'bx;
    end
end

always @ (input_image_empty_n or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st5_fsm_4) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(input_image_empty_n == ap_const_logic_0)))) begin
        line_buffer_we0 = ap_const_logic_1;
    end else begin
        line_buffer_we0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st4_fsm_3) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        line_buffer_we1 = ap_const_logic_1;
    end else begin
        line_buffer_we1 = ap_const_logic_0;
    end
end

always @ (output_image_full_n or ap_sig_cseq_ST_st8_fsm_7) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(output_image_full_n == ap_const_logic_0))) begin
        output_image_write = ap_const_logic_1;
    end else begin
        output_image_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st9_fsm_8) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        window_buffer_address0 = ap_const_lv4_8;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        window_buffer_address0 = ap_const_lv4_2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        window_buffer_address0 = ap_const_lv4_6;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        window_buffer_address0 = ap_const_lv4_3;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        window_buffer_address0 = ap_const_lv4_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        window_buffer_address0 = ap_const_lv4_5;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        window_buffer_address0 = ap_const_lv4_4;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        window_buffer_address0 = ap_const_lv4_1;
    end else begin
        window_buffer_address0 = 'bx;
    end
end

always @ (ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st9_fsm_8) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        window_buffer_address1 = ap_const_lv4_5;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        window_buffer_address1 = ap_const_lv4_4;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        window_buffer_address1 = ap_const_lv4_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        window_buffer_address1 = ap_const_lv4_8;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7))) begin
        window_buffer_address1 = ap_const_lv4_7;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        window_buffer_address1 = ap_const_lv4_2;
    end else begin
        window_buffer_address1 = 'bx;
    end
end

always @ (input_image_empty_n or output_image_full_n or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st9_fsm_8) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | (ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(input_image_empty_n == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | (ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) | ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(output_image_full_n == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8))) begin
        window_buffer_ce0 = ap_const_logic_1;
    end else begin
        window_buffer_ce0 = ap_const_logic_0;
    end
end

always @ (input_image_empty_n or output_image_full_n or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st9_fsm_8) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | (ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(input_image_empty_n == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(output_image_full_n == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8))) begin
        window_buffer_ce1 = ap_const_logic_1;
    end else begin
        window_buffer_ce1 = ap_const_logic_0;
    end
end

always @ (reg_203 or ap_sig_cseq_ST_st6_fsm_5 or line_buffer_load_reg_511 or window_buffer_load_2_reg_523 or window_buffer_load_4_reg_529 or input_image_read_reg_536 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st9_fsm_8) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        window_buffer_d0 = input_image_read_reg_536;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        window_buffer_d0 = line_buffer_load_reg_511;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        window_buffer_d0 = window_buffer_load_4_reg_529;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        window_buffer_d0 = window_buffer_load_2_reg_523;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        window_buffer_d0 = reg_203;
    end else begin
        window_buffer_d0 = 'bx;
    end
end

always @ (reg_203 or ap_sig_cseq_ST_st6_fsm_5 or window_buffer_load_1_reg_505 or line_buffer_load_1_reg_517 or window_buffer_load_5_reg_542 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st9_fsm_8) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        window_buffer_d1 = line_buffer_load_1_reg_517;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        window_buffer_d1 = window_buffer_load_5_reg_542;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        window_buffer_d1 = reg_203;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        window_buffer_d1 = window_buffer_load_1_reg_505;
    end else begin
        window_buffer_d1 = 'bx;
    end
end

always @ (output_image_full_n or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st9_fsm_8) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | (ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) | ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(output_image_full_n == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8))) begin
        window_buffer_we0 = ap_const_logic_1;
    end else begin
        window_buffer_we0 = ap_const_logic_0;
    end
end

always @ (output_image_full_n or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st9_fsm_8) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(output_image_full_n == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8))) begin
        window_buffer_we1 = ap_const_logic_1;
    end else begin
        window_buffer_we1 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or input_image_empty_n or output_image_full_n or exitcond2_fu_209_p2 or exitcond1_fu_221_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond2_fu_209_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((exitcond1_fu_221_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            if (~(input_image_empty_n == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            if (~(output_image_full_n == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign abscond1_fu_450_p2 = ($signed(tmp_11_fu_406_p2) > $signed(11'b00000000000)? 1'b1: 1'b0);

assign abscond_fu_426_p2 = ($signed(tmp_5_fu_359_p2) > $signed(11'b00000000000)? 1'b1: 1'b0);

assign ap_return = ap_const_lv32_0;


always @ (ap_CS_fsm) begin
    ap_sig_bdd_109 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_128 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_148 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_161 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_173 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_186 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_205 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_27 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_81 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_88 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_98 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign exitcond1_fu_221_p2 = (j_reg_191 == ap_const_lv10_280? 1'b1: 1'b0);

assign exitcond2_fu_209_p2 = (i_reg_180 == ap_const_lv9_1E0? 1'b1: 1'b0);

assign i_1_fu_215_p2 = (i_reg_180 + ap_const_lv9_1);

assign j_1_fu_227_p2 = (j_reg_191 + ap_const_lv10_1);

assign line_buffer_d1 = line_buffer_q1;

assign output_image_din = tmp_20_reg_558;

assign p_neg4_fu_354_p2 = (p_neg6_reg_548 - tmp_3_cast_fu_347_p1);

assign p_neg6_fu_312_p2 = (tmp_12_cast_fu_308_p1 - tmp_9_cast_fu_285_p1);

assign p_neg7_cast_fu_397_p1 = $signed(p_neg7_reg_553);

assign p_neg7_fu_334_p2 = (tmp_10_fu_328_p2 - tmp_10_cast1_fu_289_p1);

assign p_neg9_fu_400_p2 = ($signed(tmp_15_cast_fu_382_p1) + $signed(p_neg7_cast_fu_397_p1));

assign tmp_10_cast1_fu_289_p1 = window_buffer_load_4_reg_529;

assign tmp_10_cast_fu_351_p1 = window_buffer_load_4_reg_529;

assign tmp_10_fu_328_p2 = ($signed(tmp_18_cast_fu_324_p1) + $signed(tmp_9_cast2_fu_281_p1));

assign tmp_11_fu_406_p2 = (p_neg9_fu_400_p2 - tmp_17_cast_fu_393_p1);

assign tmp_12_cast_fu_308_p1 = tmp_s_fu_302_p2;

assign tmp_12_fu_237_p2 = (ap_const_lv11_280 + tmp_4_cast_fu_233_p1);

assign tmp_13_cast1_fu_243_p1 = tmp_12_fu_237_p2;

assign tmp_13_fu_248_p2 = ($signed(ap_const_lv11_500) + $signed(tmp_4_cast_fu_233_p1));

assign tmp_14_fu_432_p2 = (ap_const_lv8_0 - tmp_16_fu_422_p1);

assign tmp_15_cast_fu_382_p1 = tmp_6_fu_375_p3;

assign tmp_15_fu_438_p3 = ((abscond_fu_426_p2[0:0] === 1'b1) ? tmp_16_fu_422_p1 : tmp_14_fu_432_p2);

assign tmp_16_fu_422_p1 = tmp_5_fu_359_p2[7:0];

assign tmp_17_cast1_fu_254_p1 = tmp_13_fu_248_p2;

assign tmp_17_cast_fu_393_p1 = tmp_8_fu_386_p3;

assign tmp_17_fu_446_p1 = tmp_11_fu_406_p2[7:0];

assign tmp_18_cast_fu_324_p1 = $signed(tmp_9_fu_318_p2);

assign tmp_18_fu_456_p2 = (ap_const_lv8_0 - tmp_17_fu_446_p1);

assign tmp_19_fu_462_p3 = ((abscond1_fu_450_p2[0:0] === 1'b1) ? tmp_17_fu_446_p1 : tmp_18_fu_456_p2);

assign tmp_20_fu_470_p2 = (tmp_15_fu_438_p3 + tmp_19_fu_462_p3);

assign tmp_3_cast_fu_347_p1 = tmp_3_fu_340_p3;

assign tmp_3_fu_340_p3 = {{window_buffer_load_2_reg_523}, {ap_const_lv1_0}};

assign tmp_4_cast_fu_233_p1 = j_reg_191;

assign tmp_4_fu_259_p1 = j_reg_191;

assign tmp_5_cast_fu_264_p1 = line_buffer_load_reg_511;

assign tmp_5_fu_359_p2 = (p_neg4_fu_354_p2 - tmp_10_cast_fu_351_p1);

assign tmp_6_fu_375_p3 = {{window_buffer_load_1_reg_505}, {ap_const_lv1_0}};

assign tmp_7_cast_fu_274_p1 = tmp_7_fu_267_p3;

assign tmp_7_fu_267_p3 = {{line_buffer_load_1_reg_517}, {ap_const_lv1_0}};

assign tmp_8_cast_fu_278_p1 = input_image_read_reg_536;

assign tmp_8_fu_386_p3 = {{window_buffer_load_5_reg_542}, {ap_const_lv1_0}};

assign tmp_9_cast2_fu_281_p1 = reg_203;

assign tmp_9_cast_fu_285_p1 = reg_203;

assign tmp_9_fu_318_p2 = (tmp_5_cast_fu_264_p1 - tmp_8_cast_fu_278_p1);

assign tmp_cast_fu_298_p1 = tmp_fu_292_p2;

assign tmp_fu_292_p2 = (tmp_5_cast_fu_264_p1 + tmp_8_cast_fu_278_p1);

assign tmp_s_fu_302_p2 = (tmp_cast_fu_298_p1 + tmp_7_cast_fu_274_p1);


endmodule //sobel

